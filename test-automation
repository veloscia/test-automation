Hereâ€™s a detailed implementation plan and code structure for developing a test automation framework based on your requirements:

### 1. Create the JSON Configuration File

Create a configuration file named `application.config` with the following structure:

```json
{
  "URL": "https://practicetestautomation.com/practice-test-login/",
  "BrowserType": "Chrome",  // can be "Firefox" or "Edge"
  "Headless": true
}
```

### 2. Develop the BaseSetup Class

The `BaseSetup` class will encapsulate setup and configuration logic.

```csharp
using Newtonsoft.Json;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Firefox;
using System.IO;

public abstract class BaseSetup
{
    protected IWebDriver driver;
    protected string Url { get; private set; }
    protected string BrowserType { get; private set; }
    protected bool Headless { get; private set; }

    public BaseSetup()
    {
        ReadConfig();
        InitializeDriver();
    }

    private void ReadConfig()
    {
        var config = File.ReadAllText("application.config");
        dynamic jsonConfig = JsonConvert.DeserializeObject(config);
        Url = jsonConfig.URL;
        BrowserType = jsonConfig.BrowserType;
        Headless = jsonConfig.Headless;
    }

    public virtual void Setup()
    {
        // Additional setup logic can go here
    }

    [SetUp]
    public void InitSetup()
    {
        Setup();
    }

    [TearDown]
    public void Cleanup()
    {
        driver.Quit();
    }

    private void InitializeDriver()
    {
        switch (BrowserType.ToLower())
        {
            case "chrome":
                var chromeOptions = new ChromeOptions();
                if (Headless)
                    chromeOptions.AddArgument("--headless");
                driver = new ChromeDriver(chromeOptions);
                break;
            case "firefox":
                var firefoxOptions = new FirefoxOptions();
                if (Headless)
                    firefoxOptions.AddArgument("--headless");
                driver = new FirefoxDriver(firefoxOptions);
                break;
            case "edge":
                var edgeOptions = new EdgeOptions();
                if (Headless)
                    edgeOptions.AddArgument("--headless");
                driver = new EdgeDriver(edgeOptions);
                break;
            default:
                throw new NotSupportedException("Browser type not supported");
        }
    }
}
```

### 3. Create Page Object Model Classes

Create a class for the login page according to the Page Object Model (POM) design pattern. This class will encapsulate the elements on the login page.

```csharp
using OpenQA.Selenium;
using System;

public class LoginPage
{
    private IWebDriver driver;
    private IWebElement UsernameField => driver.FindElement(By.Id("username"));
    private IWebElement PasswordField => driver.FindElement(By.Id("password"));
    private IWebElement LoginButton => driver.FindElement(By.CssSelector("button[type='submit']"));

    public LoginPage(IWebDriver driver)
    {
        this.driver = driver;
    }

    public void NavigateToLoginPage(string url)
    {
        driver.Navigate().GoToUrl(url);
    }

    public void EnterUsername(string username)
    {
        UsernameField.SendKeys(username);
    }

    public void EnterPassword(string password)
    {
        PasswordField.SendKeys(password);
    }

    public void ClickLogin()
    {
        LoginButton.Click();
    }
}

public interface ILoginPage
{
    void EnterUsername(string username);
    void EnterPassword(string password);
    void ClickLogin();
}
```

### 4. Implement NUnit Testing

Create a test class that conducts the login test using NUnit. It will utilize the `BaseSetup` class and `LoginPage`.

```csharp
using NUnit.Framework;

[TestFixture]
public class LoginTests : BaseSetup
{
    private LoginPage loginPage;

    [SetUp]
    public override void Setup()
    {
        base.Setup();
        loginPage = new LoginPage(driver);
        loginPage.NavigateToLoginPage(Url);
    }

    [Test]
    public void TestLogin()
    {
        // Arrange
        string username = "your_username"; // replace with valid username
        string password = "your_password"; // replace with valid password

        // Act
        loginPage.EnterUsername(username);
        loginPage.EnterPassword(password);
        loginPage.ClickLogin();

        // Assert
        // Add assertions to verify login success, e.g. checking URL or element presence
        Assert.AreEqual("Expected URL or element", driver.Url); // replace with actual expected outcome
    }
}
```

### Summary

This implementation includes a framework setup based on Selenium and C#, implementing Object-Oriented principles. It creates a JSON configuration file, utilizes a BaseSetup class for driver management, applies the Page Object Model for the login page, and conducts a login test using NUnit. Adjust the actual test and config values according to your settings.